@using DeltaQrCode.ModelsDto
@using Microsoft.AspNetCore.Razor.TagHelpers
@model DeltaQrCode.ViewModels.HotelAnvelope.AddEditSetAnvelopeVM
<style>
    .modal-min-height {
        min-height: 450px;
    }

    .required-field::before {
        content: "*";
    }

    .margin150left {
        margin-left: 150px;
    }
</style>


<input id="defaultPosition" hidden="hidden" data-value="@Model.PozitieInRaft" />
<input id="defaultMarca" hidden="hidden" data-value="@Model.Marca" />
<input id="defaultFlota" hidden="hidden" data-value="@Model.Flota" />
<input id="defaultTipSezon" hidden="hidden" data-value="@Model.TipSezon" />
<input id="defaultStatusAnv" hidden="hidden" data-value="@Model.StatusCurent" />


<div class="modal-header">

    <h3 id="myModalLabel"> Edit Set </h3>

    <button type="button" class="close float-right" data-dismiss="modal" aria-hidden="true">×</button>
</div>


<div>
    <div class="modal-body modal-min-height ui-front" id="hotelModalBody">
        <form id="apptform">
            @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "form-control half-margin-bottom", @hidden = "hidden" } })
            @Html.AntiForgeryToken()
            <div class="form-row">
                <div class="col">

                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.NumeClient, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.NumeClient, new { htmlAttributes = new { @class = "form-control half-margin-bottom validate" } })
                            @Html.ValidationMessageFor(model => model.NumeClient, "", new { @class = "text-danger error_span" })
                        </div>
                    </div>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.NumarInmatriculare, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.NumarInmatriculare, new { htmlAttributes = new { @class = "form-control half-margin-bottom validate" } })
                            @Html.ValidationMessageFor(model => model.NumarInmatriculare, "", new { @class = "text-danger error_span" })
                        </div>
                    </div>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.NumarTelefon, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.NumarTelefon, new { htmlAttributes = new { @class = "form-control half-margin-bottom validate" } })
                            @Html.ValidationMessageFor(model => model.NumarTelefon, "", new { @class = "text-danger error_span" })
                        </div>
                    </div>

                </div>
                <br />
                <div class="col">
                    <div class="row">
                        <div class="col">
                            <h6 style="margin-left: 50px;">Uzura: </h6>

                            <div class="form-group">
                                @Html.LabelFor(model => model.StangaFata, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.StangaFata, new { htmlAttributes = new { @class = "form-control col-md-6 half-margin-bottom uzura", @type = "text" } })
                                    @Html.ValidationMessageFor(model => model.StangaFata, "", new { @class = "text-danger error_span" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.StangaSpate, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.StangaSpate, new { htmlAttributes = new { @class = "form-control col-md-6 half-margin-bottom uzura", @type = "text" } })
                                    @Html.ValidationMessageFor(model => model.StangaSpate, "", new { @class = "text-danger error_span" })
                                </div>
                            </div>

                        </div>
                        <div class="col" style="margin-top:27px;">

                            <div class="form-group">
                                @Html.LabelFor(model => model.DreaptaFata, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.DreaptaFata, new { htmlAttributes = new { @class = "form-control col-md-6 half-margin-bottom uzura", @type = "text" } })
                                    @Html.ValidationMessageFor(model => model.DreaptaFata, "", new { @class = "text-danger error_span" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.DreaptaSpate, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.DreaptaSpate, new { htmlAttributes = new { @class = "form-control col-md-6 half-margin-bottom uzura", @type = "text" } })
                                    @Html.ValidationMessageFor(model => model.DreaptaSpate, "", new { @class = "text-danger error_span" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-row">

                <div class="form-group col-md-6 col-sm-4">
                    @Html.LabelFor(model => model.Marca, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                    <div class="col-md-9">
                        <select id="Marca" class="form-control" asp-for="Marca" data-placeholder="@Model.Marca" value="@Model.Marca"></select>
                        @Html.ValidationMessageFor(model => model.Marca, "", new { @class = "text-danger error_span" })
                    </div>
                </div>

                <div class="form-group col-md-6 col-sm-4">
                    @Html.LabelFor(model => model.Flota, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                    <div class="col-md-9">
                        <select id="Flota" class="form-control" asp-for="Flota" data-placeholder="@Model.Flota" value="@Model.Flota"></select>
                        @Html.ValidationMessageFor(model => model.Flota, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4 col-sm-4">
                    @Html.LabelFor(model => model.NrBucati, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                    <div class="col-md-9 ">
                        @Html.EditorFor(model => model.NrBucati, new { htmlAttributes = new { @class = "form-control half-margin-bottom", @type = "text", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.NrBucati, "", new { @class = "text-danger error_span" })
                    </div>
                </div>

            </div>

            <div class="form-row">
                <h6 style="margin-left: 50px;">Dimensiuni: </h6>
            </div>

            <div class="form-row">

                <div class="form-group col-md-4 col-sm-4">
                    @Html.LabelFor(model => model.Diametru, htmlAttributes: new { @class = "control-label col-md-4 required-field" })
                    @Html.EditorFor(model => model.Diametru, new { htmlAttributes = new { @class = "form-control half-margin-bottom validate", @type = "text" } })
                    @Html.ValidationMessageFor(model => model.Diametru, "", new { @class = "text-danger error_span" })

                </div>

                <div class="form-group col-md-4 col-sm-4">
                    @Html.LabelFor(model => model.Latime, htmlAttributes: new { @class = "control-label col-md-4 required-field" })
                    @Html.EditorFor(model => model.Latime, new { htmlAttributes = new { @class = "form-control half-margin-bottom validate", @type = "text" } })
                    @Html.ValidationMessageFor(model => model.Latime, "", new { @class = "text-danger error_span" })
                </div>

                <div class="form-group col-md-4 col-sm-4">
                    @Html.LabelFor(model => model.Inaltime, htmlAttributes: new { @class = "control-label col-md-4 required-field" })
                    @Html.EditorFor(model => model.Inaltime, new { htmlAttributes = new { @class = "form-control half-margin-bottom validate", @type = "text" } })
                    @Html.ValidationMessageFor(model => model.Inaltime, "", new { @class = "text-danger error_span" })
                </div>
            </div>


            <div class="form-row" style="margin-top: 30px;">

                <div class="form-group col-md-3 col-sm-3">
                    @Html.LabelFor(model => model.TipSezon, htmlAttributes: new { @class = "control-label col-md-3 ", @id = "tipSezonLabel", @name = "tipSezonLabel" })
                    <div class="col-md-9">
                        <select class="form-control" id="tipSezon" asp-for="TipSezon" data-placeholder="@Model.TipSezon" value="@Model.TipSezon"></select>

                        @Html.ValidationMessageFor(model => model.TipSezon, "", new { @class = "text-danger error_span" })
                    </div>
                </div>
                <div class="form-group col-md-3 col-sm-3">
                    @Html.LabelFor(model => model.StatusCurent, htmlAttributes: new { @class = "control-label col-md-3 ", @id = "statusAnvLabel", @name = "statusAnvLabel" })
                    <div class="col-md-9">
                        <select class="form-control" id="statusAnv" asp-for="StatusCurent" data-placeholder="@Model.StatusCurent" value="@Model.StatusCurent"></select>

                        @Html.ValidationMessageFor(model => model.StatusCurent, "", new { @class = "text-danger error_span" })
                    </div>
                </div>

                <div class="form-group col-md-6 col-sm-3">
                    @Html.LabelFor(model => model.PozitieInRaft, htmlAttributes: new { @class = "control-label col-md-3 ", @id = "pozitieInRaftLabel", @name = "pozitieInRaftLabel" })
                    <div class="col-md-9">
                        <select id="selPoz" class="form-control" asp-for="PozitieInRaft" data-placeholder="@Model.PozitieInRaft" value="@Model.PozitieInRaft"></select>
                        @Html.ValidationMessageFor(model => model.PozitieInRaft, "", new { @class = "text-danger error_span" })
                    </div>
                </div>
            </div>

            <div class="form-row col-md-12 col-sm-12">
                @Html.LabelFor(model => model.Observatii, htmlAttributes: new { @class = "control-label col-md-3 " })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.Observatii, new { htmlAttributes = new { @class = "form-control half-margin-bottom", @id = "observatii", @name = "observatii" } })
                    @Html.ValidationMessageFor(model => model.Observatii, "", new { @class = "text-danger error_span" })
                </div>
            </div>

        </form>
    </div>

    <div>
        <p id="serverErrorMsg" style="color:red; padding: 5px;"></p>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary btn-default" data-dismiss="modal">Cancel</button>
        <a class="btn btn-outline-success btn-ok" id="apptsEditSubmitButton">Save</a>
    </div>
</div>

@*<script type="text/javascript" src="js/edit-set-anv-partial.js"></script>*@
<script type="text/javascript">

    // Initialize select2
    //Select2 for Position
    $("#selPoz").select2({
        dropdownParent: "#hotelModalBody",
        theme: "bootstrap4",
        allowClear: true,
        ajax: {
            url: '/Hotel/GetAvailablePositions',
            contentType: "application/json; charset=utf-8",
            data: function (params) {
                var query = {
                    term: params.term
                }
                return query;
            },
            processResults: function (result) {
                return {
                    results: $.map(result,
                        function (item) {
                            return {
                                id: item,
                                text: item
                            };
                        }),
                };
            }
        }
    });

    // Select2 for Marca
    $("#Marca").select2({
        tags: true,
        dropdownParent: "#hotelModalBody",
        theme: "bootstrap4",
        allowClear: true,
        ajax: {
            url: '/Hotel/GetMarci',
            contentType: "application/json; charset=utf-8",
            data: function (params) {
                var query = {
                    term: params.term
                }
                return query;
            },
            processResults: function (result) {
                return {
                    results: $.map(result,
                        function (item) {
                            return {
                                id: item,
                                text: item
                            };
                        }),
                };
            }
        }
    });

    // Select2 for Flota
    $("#Flota").select2({
        tags: true,
        dropdownParent: "#hotelModalBody",
        theme: "bootstrap4",
        allowClear: true,
        ajax: {
            url: '/Hotel/GetFlote',
            contentType: "application/json; charset=utf-8",
            data: function (params) {
                var query = {
                    term: params.term
                }
                return query;
            },
            processResults: function (result) {
                return {
                    results: $.map(result,
                        function (item) {
                            return {
                                id: item,
                                text: item
                            };
                        }),
                };
            }
        }
    });
    // Select2 for TipSezon
    $("#tipSezon").select2({
        tags: true,
        dropdownParent: "#hotelModalBody",
        theme: "bootstrap4",
        minimumResultsForSearch: Infinity,
        ajax: {
            url: '/Hotel/GetTireTypes',
            dataType: 'json',
            processResults: function (result) {
                return {
                    results: $.map(result,
                        function (item) {
                            return {
                                id: item,
                                text: item
                            };
                        }),
                };
            }
        }
    });
    // Select2 for StatusAnvelope
    $("#statusAnv").select2({
        tags: true,
        dropdownParent: "#hotelModalBody",
        theme: "bootstrap4",
        minimumResultsForSearch: Infinity,
        ajax: {
            url: '/Hotel/GetStatusAnvelope',
            dataType: 'json',
            processResults: function (result) {
                return {
                    results: $.map(result,
                        function (item) {
                            return {
                                id: item,
                                text: item
                            };
                        }),
                };
            }
        }
    });

    // select2 initial value for position
    var selPozObj = $('#selPoz');
    var selPozVal = $("#defaultPosition").attr("data-value");
    if (selPozVal != NaN && selPozVal != '') {
        var optionPoz = new Option(selPozVal, selPozVal, true, true);
        selPozObj.append(optionPoz);
        selPozObj.val(selPozVal);
        selPozObj.trigger('change'); // Notify any JS components that the value changed
    }

    // select2 initial value for marca
    var marcaObj = $('#Marca');
    var marcaVal = $("#defaultMarca").attr("data-value");
    if (marcaVal != NaN && marcaVal != '') {
        var optionMarca = new Option(marcaVal, marcaVal, true, true);
        marcaObj.append(optionMarca);
        marcaObj.val(marcaVal);
        marcaObj.trigger('change'); // Notify any JS components that the value changed
    }

    // select2 initial value for flota
    var flotaObj = $('#Flota');
    var flotaVal = $("#defaultFlota").attr("data-value");
    if (flotaVal != NaN && flotaVal != '') {
        var optionFlota = new Option(flotaVal, flotaVal, true, true);
        flotaObj.append(optionFlota);
        flotaObj.val(flotaVal);
        flotaObj.trigger('change'); // Notify any JS components that the value changed
    }

    // select2 initial value for tipSezon
    var tipSezonObj = $('#tipSezon');
    var tipSezonValue = $("#defaultTipSezon").attr("data-value");
    if (tipSezonValue != NaN && tipSezonValue != '') {
        var optionTipSezon = new Option(tipSezonValue, tipSezonValue, true, true);
        tipSezonObj.append(optionTipSezon);
        tipSezonObj.val(tipSezonValue).trigger('change'); // Notify any JS components that the value changed
    }

    // select2 initial value for StatusAnvelope
    var statusAnvObj = $('#statusAnv');
    var statusAnvValue = $("#defaultStatusAnv").attr("data-value");
    if (statusAnvValue != NaN && statusAnvValue != '') {
        var optionstatusAnv = new Option(statusAnvValue, statusAnvValue, true, true);
        statusAnvObj.append(optionstatusAnv);
        statusAnvObj.val(statusAnvValue).trigger('change'); // Notify any JS components that the value changed
    }

    $(document).ready(function () {
        $(document).on("change",
            "#statusAnv",
            function () {
                $("#selPoz").trigger("updatedStatus");
            });
        $("#selPoz").on("updatedStatus",
            function () {
                var pos = $("#selPoz");
                pos.removeAttr("disabled");
                pos.removeClass("disabled");
                var statusVal = $("#statusAnv").val();
                if (statusVal != "InRaft") {
                    pos.attr("disabled", "disabled");
                    pos.addClass("disabled");
                }
            });
    });
    // when loading validate all inputs
    var validator = new CustomValidation(anvelopeFormValidationRules);
    validator.addcustomValidationRules(uzuraStFRules);
    validator.addcustomValidationRules(uzuraDrFRules);
    validator.addcustomValidationRules(uzuraStSRules);
    validator.addcustomValidationRules(uzuraDrSRules);
    $(document).ready(function () {
        var result = validator.validate(validator);
        updateUi(result.validationResults, "form-group", "error_span");
    });
    // SAVE BTN CLICK EVENT
    $(document).on("click",
        "#apptsEditSubmitButton",
        function () {

            var result = validator.validate(validator);
            if (result.formIsValid) {
                $.ajax({
                    type: "POST",
                    url: "/Hotel/EditModal",
                    data: $('#apptform').serialize(),
                    dataType: "json",
                    success: function (response) {
                        CloseModalById('myHotelModal');
                        ShowHeaderAlert(response, "success", 5000);
                        $('#hotelListState').change();
                    },
                    error: function (error) {
                        CloseModalById('myHotelModal');
                        ShowHeaderAlert(error.responseJSON.Message, "error", 5000);
                    }
                });
            } else {
                updateUi(result.validationResults, "form-group", "error_span");
            }
        });
    $(document).on("keyup",
        ".validate",
        function () {
            var result = validator.validate(validator);
            updateUi(result.validationResults, "form-group", "error_span");
        });



    var disableElementsByIds = function (elements) {
        $.each(elements, function (index, element) {
            var item = $(document).find("#" + element);
            //item.addClass("readonly");
            item.attr("disabled", "disabled");
            item.addClass("disabled");
        });
    }
    var enableInputsByIds = function (elements) {
        $.each(elements,
            function (index, element) {
                var item = $(document).find("#" + element);
                //item.addClass("readonly");
                item.removeAttr("disabled");
                item.removeClass("disabled");
            });
    };

    $(document).on("keyup", ".uzura", function () {
        var stF = $(document).find("#StangaFata");
        var drF = $(document).find("#DreaptaFata");
        var stS = $(document).find("#StangaSpate");
        var drS = $(document).find("#DreaptaSpate");
        var initialNr = 0;
        var uzura = new Uzura();

        // clear all validation rules
        //validator.removeCustomValidationRules(uzuraDrFRules);
        //validator.removeCustomValidationRules(uzuraStSRules);
        //validator.removeCustomValidationRules(uzuraDrSRules);

        // if stf & drF filled ->  then add validationRule for drF  ->  enable Input stS
        if (stF.val() != "" && drF.val() != "") {
            validator.addcustomValidationRules(uzuraDrFRules);
            if (!uzura.drF) {
                uzura.activateField(drF.attr("id"));
            }
            enableInputsByIds([stS.attr("id")]);
            // if stF & drF & stS filled ->  then add validationRule for stS  ->  enable Input drS
            if (stS.val() != "") {
                validator.addcustomValidationRules(uzuraStSRules);
                if (!uzura.stS) {
                    uzura.activateField(stS.attr("id"));
                }
                enableInputsByIds([drS.attr("id")]);
                // if stF & drF & stS & drS filled -> then add validationRule for drS -> all fields should be enabled
                if (stF.val() != "" && drF.val() != "" && stS.val() != "" && drS.val() != "") {
                    validator.addcustomValidationRules(uzuraDrSRules);
                    if (!uzura.drS) {
                        uzura.activateField(drS.attr("id"));
                    }
                }
            }
        }
        // if drS == "" -> unfill drS -> then remove validationRule for drS -> input remains enabled drS
        if (drS.val() == "") {
            if (uzura.drS) {
                uzura.deactivate(drS.attr("id"));
            }
            validator.removeCustomValidationRules(uzuraDrSRules);

            // if drS == "" && stS == "" -> unfill stS -> remove validation rule for stS -> disable drS
            if (stS.val() == "") {
                if (uzura.stS) {
                    uzura.deactivate(stS.attr("id"));
                }
                validator.removeCustomValidationRules(uzuraStSRules);
                disableElementsByIds([drS.attr("id")]);
                // if drS == "" && stS == "" && drF == "" -> unfill drF -> remove validation rule for drF -> disable stS
                if (drF.val() == "") {
                    if (uzura.drF) {
                        uzura.deactivate(drF.attr("Id"));
                    }
                    validator.removeCustomValidationRules(uzuraDrFRules);
                    disableElementsByIds([stS.attr("id")]);
                }
            }
        }
        var nrBuc = $(document).find("#NrBucati");
        nrBuc.val(uzura.nrBuc);
        var result = validator.validate(validator);
        updateUi(result.validationResults, "form-group", "error_span");
    });




</script>
