@using DeltaQrCode.ModelsDto
@using Microsoft.AspNetCore.Razor.TagHelpers
@model DeltaQrCode.ViewModels.Appointments.AppointmentModalVm

<style>
    .modal-min-height {
        min-height: 450px;
    }

    .required-field::before {
        content: "*";
    }

    .margin150left {
        margin-left: 150px;
    }
</style>

<input id="defaultServiciu" hidden="hidden" data-value="@Model.Appointment.Serviciu" />

<div class="modal-header">
    <h3 id="myModalLabel">@(Model.CreateOrEdit == ActionType.Add ? "Create Appointment" : "Edit Appointment")</h3>
    <button type="button" class="close float-right" data-dismiss="modal" aria-hidden="true">×</button>
</div>
<div>
    @using (Html.BeginForm("EditModal", "Appointments", FormMethod.Post, new { @id = "apptform" }))
    {

        @Html.AntiForgeryToken()
    <div class="modal-body modal-min-height" id="apptModalBody">

            <div class="form-group">
            </div>

            <div class="form-group">
                <div class="col-md-9">
                    <input id="datepickerModal" type="text" class="form-control" placeholder="Selecteaza data" />
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-3 required-field">Time</label>
                <div class="col-md-9">
                    <div class="inline-block width100 half-margin-bottom">
                        <input type="number" class="form-control" asp-for="Appointment.StartTime_Hour" />
                    </div>
                    <div class="inline-block width100">
                        <input type="number" class="form-control" asp-for="Appointment.StartTime_Minutes" />
                    </div>

                    @Html.ValidationMessageFor(model => model.Appointment.StartTime_Hour, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.Appointment.StartTime_Minutes, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Appointment.DurataInMinute, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                <div class="col-md-9">
                    <input type="number" class="form-control" asp-for="Appointment.DurataInMinute" />
                    @Html.ValidationMessageFor(model => model.Appointment.DurataInMinute, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Appointment.Serviciu, htmlAttributes: new { @class = "control-label col-md-3 required-field", @id = "serviciuLabel", @name = "serviciuLabel" })
                <div class="col-md-9">
                    <select id="serviciu" asp-for="Appointment.Serviciu" data-placeholder="@Model.Appointment.Serviciu" value="@Model.Appointment.Serviciu"></select>

                    @Html.ValidationMessageFor(model => model.Appointment.Serviciu, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Appointment.NumarInmatriculare, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.Appointment.NumarInmatriculare, new { htmlAttributes = new { @class = "form-control half-margin-bottom" } })
                    @Html.ValidationMessageFor(model => model.Appointment.NumarInmatriculare, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Appointment.NumeClient, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.Appointment.NumeClient, new { htmlAttributes = new { @class = "form-control half-margin-bottom" } })
                    @Html.ValidationMessageFor(model => model.Appointment.NumeClient, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Appointment.NumarTelefon, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.Appointment.NumarTelefon, new { htmlAttributes = new { @class = "form-control half-margin-bottom" } })
                    @Html.ValidationMessageFor(model => model.Appointment.NumarTelefon, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Appointment.EmailClient, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.Appointment.EmailClient, new { htmlAttributes = new { @class = "form-control half-margin-bottom" } })
                    @Html.ValidationMessageFor(model => model.Appointment.EmailClient, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Appointment.Observatii, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.TextAreaFor(model => model.Appointment.Observatii, 3, 40, new { htmlAttributes = new { @class = "form-control half-margin-bottom width100pc" } })
                    @Html.ValidationMessageFor(model => model.Appointment.Observatii, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Appointment.Confirmed, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.CheckBoxFor(model => model.Appointment.Confirmed, new { htmlAttributes = new { @class = "form-control half-margin-bottom" } })
                    @Html.ValidationMessageFor(model => model.Appointment.Confirmed, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div>
            <p id="serverErrorMsg" style="color:red; padding: 5px;"></p>
        </div>

        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            <a class="btn btn-success btn-ok" id="apptsSubmitButton">Submit</a>
        </div>
    }

</div>


<script type="text/javascript">

    $("#apptsSubmitButton").click(function () {

        $.ajax({
            type: "POST",
            url: "@Url.Action("EditModal", "Appointments")",
            data: $('#apptform').serialize(),
            success: function (result) {
                if (result == "success") {
                    $('#myApptModal').modal('hide');
                    //location.reload();
                    var proIdModal = $('#ddlProfessionalModal').find(":selected").val();
                    var dateToView = $('#tbStartTimeDate').val();

                    location.href = location.protocol + '//' + location.host + location.pathname + '?startDateString=""&activeDateString=' + dateToView + '&professionalIdString=' + proIdModal;

                } else {
                    $('#serverErrorMsg').html(result);
                }
            }
        });
    });


            // Select2 for Serviciu
            $("#serviciu").select2({
                tags: true,
                dropdownParent: "#apptModalBody",
                theme: "bootstrap4",
                minimumResultsForSearch: Infinity,
                ajax: {
                    url: '/Appointments/GetTipServiciu',
                    dataType: 'json',
                    processResults: function (result) {
                        return {
                            results: $.map(result, function (item) {
                                return {
                                    id: item,
                                    text: item
                                };
                            }),
                        };
                    }
                }
            });

            // select2 initial value for Serviciu
            var serviciuObj = $('#serviciu');
            var serviciuValue = $("#defaultServiciu").attr("data-value");
            if (serviciuValue != NaN && serviciuValue != '') {
                var optionserviciu = new Option(serviciuValue, serviciuValue, true, true);
                serviciuObj.append(optionserviciu);
                serviciuObj.val(serviciuValue).trigger('change'); // Notify any JS components that the value changed
            }






</script>
