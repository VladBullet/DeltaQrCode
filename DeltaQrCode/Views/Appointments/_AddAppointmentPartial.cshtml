@using DeltaQrCode.ModelsDto
@using Microsoft.AspNetCore.Razor.TagHelpers
@model DeltaQrCode.ViewModels.Appointments.AppointmentVM

<style>
    .modal-min-height {
        min-height: 450px;
    }

    .required-field::before {
        content: "*";
    }

    .margin150left {
        margin-left: 150px;
    }
</style>

<input id="defaultServiciu" hidden="hidden" data-value="@Model.Serviciu" />
<input id="defaultDurata" hidden="hidden" data-value="@Model.DurataInMinute" />
<div class="modal-header">
    <h3 id="myModalLabel">Adauga programare</h3>
    <button type="button" class="close float-right" data-dismiss="modal" aria-hidden="true">×</button>
</div>
<div>
    <form id="apptform" method="post">
        @Html.AntiForgeryToken()
        <div class="modal-body modal-min-height" id="apptModalBody">

            <div class="form-group">
            </div>

            <div class="form-group">
                <h6 style="margin-left:20px;">Data programare</h6>
                <div class="col-md-6">
                    <input id="datepickerModal" asp-for="DataAppointment" type="text" class="form-control" placeholder="Selecteaza data" />
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-3 required-field">Time</label>
                <div class="col-md-9">
                    <div class="inline-block width100 half-margin-bottom">
                        <input type="number" class="form-control" asp-for="StartTime_Hour" />
                    </div>
                    <div class="inline-block width100">
                        <input type="number" class="form-control" asp-for="StartTime_Minutes" />
                    </div>

                    @Html.ValidationMessageFor(model => model.StartTime_Hour, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.StartTime_Minutes, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.DurataInMinute, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                <div class="col-md-9">
                    <select class="form-control" id="Durata" asp-for="DurataInMinute" data-placeholder="@Model.DurataInMinute" value="@Model.DurataInMinute"></select>
                    @Html.ValidationMessageFor(model => model.DurataInMinute, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Serviciu, htmlAttributes: new { @class = "control-label col-md-3 required-field", @id = "serviciuLabel", @name = "serviciuLabel" })
                <div class="col-md-9">
                    <select id="serviciu" asp-for="Serviciu" data-placeholder="@Model.Serviciu" value="@Model.Serviciu"></select>

                    @Html.ValidationMessageFor(model => model.Serviciu, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.NumarInmatriculare, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.NumarInmatriculare, new { htmlAttributes = new { @class = "form-control half-margin-bottom" } })
                    @Html.ValidationMessageFor(model => model.NumarInmatriculare, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.NumeClient, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.NumeClient, new { htmlAttributes = new { @class = "form-control half-margin-bottom" } })
                    @Html.ValidationMessageFor(model => model.NumeClient, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.NumarTelefon, htmlAttributes: new { @class = "control-label col-md-3 required-field" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.NumarTelefon, new { htmlAttributes = new { @class = "form-control half-margin-bottom" } })
                    @Html.ValidationMessageFor(model => model.NumarTelefon, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.EmailClient, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.EmailClient, new { htmlAttributes = new { @class = "form-control half-margin-bottom" } })
                    @Html.ValidationMessageFor(model => model.EmailClient, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Observatii, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.TextAreaFor(model => model.Observatii, 3, 40, new { htmlAttributes = new { @class = "form-control half-margin-bottom width100pc" } })
                    @Html.ValidationMessageFor(model => model.Observatii, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Confirmed, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.CheckBoxFor(model => model.Confirmed, new { htmlAttributes = new { @class = "form-control half-margin-bottom" } })
                    @Html.ValidationMessageFor(model => model.Confirmed, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div>
            <p id="serverErrorMsg" style="color:red; padding: 5px;"></p>
        </div>

        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            <a class="btn btn-success btn-ok" id="apptsAddButton">Adauga</a>
        </div>
    </form>

</div>


<script type="text/javascript">
    $("#apptsAddButton").click(function () {
           var url = "@Url.Action("AddAppt", "Appointments")";
        $.ajax({
                type: "POST",
                url:url,
                data: $('#apptform').serialize(),
                dataType:"json",
                success: function (response) {
                    CloseModalById('myApptModal');
                    ShowHeaderAlert(response, "success", 5000);
/*                    $('#ApptState').change();*/
                },
                error: function (error) {
                    CloseModalById('myApptModal');
                    ShowHeaderAlert(error.responseJSON.Message, "error",5000);

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("ErrorModal","Error")",
                        dataType: "json",
                        traditional: true,
                        contentType: 'application/json',
                        success: function (response) {
                            $("#GetModalCode").html(response);
                            $("#ErrorModal").modal('show');
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            });
        //}
    });


            // Select2 for Serviciu
            $("#serviciu").select2({
                tags: true,
                dropdownParent: "#apptModalBody",
                theme: "bootstrap4",
                minimumResultsForSearch: Infinity,
                ajax: {
                    url: '/Appointments/GetTipServiciu',
                    dataType: 'json',
                    processResults: function (result) {
                        return {
                            results: $.map(result, function (item) {
                                return {
                                    id: item,
                                    text: item
                                };
                            }),
                        };
                    }
                }
            });

            // select2 initial value for Serviciu
            var serviciuObj = $('#serviciu');
            var serviciuValue = $("#defaultServiciu").attr("data-value");
            if (serviciuValue != NaN && serviciuValue != '') {
                var optionserviciu = new Option(serviciuValue, serviciuValue, true, true);
                serviciuObj.append(optionserviciu);
                serviciuObj.val(serviciuValue).trigger('change'); // Notify any JS components that the value changed
    }


    // Select2 for Durata
    $("#Durata").select2({
        tags: true,
        dropdownParent: "#apptModalBody",
        theme: "bootstrap4",
        allowClear: true,
        ajax: {
            url: '/Appointments/GetTimeDictionary',
            contentType: "application/json; charset=utf-8",
            data: function (params) {
                var query = {
                    term: params.term
                }
                return query;
            },
            processResults: function (result) {
                return {
                    results: $.map(result, function (time,item) {
                        return {
                            id: item,
                            text: time
                        };
                    }),
                };
            }
        }
    });

    // select2 initial value for Durata
    var durataObj = $('#Durata');
    var durataVal = $("#defaultDurata").attr("data-value");
    if (durataVal != NaN && durataVal != '') {
        var optionDurata = new Option(durataVal, durataVal, true, true);
        durataObj.append(optionDurata);
        durataObj.val(durataVal);
        durataObj.trigger('change'); // Notify any JS components that the value changed
    }







</script>
